// ignore_for_file: avoid_print

import 'package:nations_assets/nations_assets.dart';

/// ! DO NOT EDIT THIS FILE UNLESS
/// ! YOU NEED UPDATE THE VALIDATION LOGIC
void main(List<String> args) {
  try {
    const supportedLanguages = <String, Map<String, Object>>{
      'ar': arAssets,
      'en': enAssets,
      'es': esAssets,
    };

    final allKeysList = <String>[];

    /// * for each supoorted language
    for (final language in supportedLanguages.keys) {
      /// * for each key in the language
      final langKeys = findKeys(
        [],
        supportedLanguages[language]!,
        language,
      );
      allKeysList.addAll(langKeys);
    }

    for (final key in allKeysList) {
      // vlidate the key is not empty
      // or the key is not missing
      for (final lang in supportedLanguages.keys) {
        validateAssets(
            key,
            // .split('.')..removeWhere((element) => element.isEmpty),
            supportedLanguages[lang]!,
            lang);
      }
    }
    print('all assets are valid ✔');
  } on Exception catch (e) {
    print(e);
  }
}

void validateAssets(String key, Map<String, Object?> assets, String lang) {
  final value = getNested(assets, key);
  final parents = key.split('.')..removeWhere((element) => element.isEmpty);
  if (parents.isEmpty) {
    // cant use empty key
    throw Exception(
      '''
        ❌ NATIONS ASSETS VALIDATION ERROR ❌
        ERROR 😢:: Cant use empty string as a key
        LANG  🌍:: $lang
         ''',
    );
  } else if (value is String) {
    if (value.isEmpty) {
      throw Exception(
        '''
        ❌ NATIONS ASSETS VALIDATION ERROR ❌
        ERROR 😢:: String is empty
        KEY   🔑:: $key
        LANG  🌍:: $lang
         ''',
      );
    }
  } else if (value == null) {
    throw Exception(
      '''
        ❌ NATIONS ASSETS VALIDATION ERROR ::
        ERROR 😢:: Missing key
        KEY   🔑:: $key
        LANG  🌍:: $lang
         ''',
    );
  } else if (parents.length < 2) {
    checkType(parents, value, lang);
  } else if (value is Map<String, Object>) {
    // print('$lang after $keytoDigInto  ${nested.join('.')}');
    validateAssets(key, value, lang);
  } else {
    throw 'not valid value $value';
  }
}

void checkType(List<String> key, Object? value, String lang) {
  if (value is String) {
  } else {
    throw Exception(
      '''
        ❌ NATIONS ASSETS VALIDATION ERROR ::
        ERROR 😢:: Invalid type ${value.runtimeType}
        KEY   🔑:: $key
        LANG  🌍:: $lang
         ''',
    );
  }
}

List<String> findKeys(List<String> parents, Map map, String lang) {
  final keysList = <String>[];
  for (final key in map.keys) {
    if (map[key] is Map) {
      keysList.addAll(findKeys([...parents, key], map[key] as Map, lang));
    } else if (map[key] is String) {
      keysList.add(buildKeyWithParents(key, parents));
    }
  }
  return keysList;
}

/// return the key with parents as string separated by `.`
/// example :
///  ```json
///         "key1": {
///            "key2": {
///               "key3": "some value"
///           }
///      }
/// ```
///  will be => `[key1,key2,key3]`  will be `key1.key2.key3`
String buildKeyWithParents(String key, List<String> parents) {
  if (parents.isEmpty) {
    /// is not nested
    return key;
  } else {
    return parents.join('.') + '.' + key;
  }
}

Object? getNested(Map map, String key) {
  if (key.contains('.')) {
    final nestedKeys = key.split('.');
    final nestedKey = nestedKeys.first;
    if (map[nestedKey] == null) return null;
    nestedKeys.removeAt(0);
    return getNested(
      map[nestedKey],
      nestedKeys.join('.'),
    );
  } else {
    return map[key];
  }
}
